name: Module CI/CD

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # Get the version from 'module.json'
    - name: Get Version
      shell: bash
      id: get-version
      run: echo "::set-output name=version::$(node ./.github/workflows/get-version.js)"
         # get part of the tag after the `v`
    - name: Extract tag version number
      id: get_version
      uses: battila7/get-version-action@v2

    - name: Echo tag output
      run: echo ${{ steps.get_version.outputs.version-without-v }}
 
    # Substitute the Manifest and Download URLs in the system.json
    - name: Substitute Manifest and Download Links For Versioned Ones
      id: sub_manifest_link_version
      uses: microsoft/variable-substitution@v1
      with:
        files: './module.json'
      env:
        version: ${{steps.get_version.outputs.version-without-v}}
        url: https://github.com/${{github.repository}}
        manifest: https://github.com/${{github.repository}}/releases/latest/download/module.json
        download: https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.zip

           # create a zip file with all files required by the module to add to the release
    - name: Zip files
      working-directory: ./
      run: zip -r ./module.zip module.json img/ packs/ img/
      
    # Create a release for this specific version
    - name: Update Release with Files
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true # Set this to false if you want to prevent updating existing releases
        name: ${{ github.event.release.name }}
        draft: true
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        artifacts: './module.json, ./module.zip'
        tag: ${{ github.event.release.tag_name }}
        body: ${{ github.event.release.body }}


    # Create a release for this specific version
    - name: Create Release
      id: create_version_release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true # set this to false if you want to prevent updating existing releases
        name: Release ${{ steps.get-version.outputs.version }}
        draft: false
        prerelease: false
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        artifacts: './module.json,./module.zip'
        tag: ${{ steps.get-version.outputs.version }}

    # Update the 'latest' release
    - name: Create Release
      id: create_latest_release
      uses: ncipollo/release-action@v1
      if: endsWith(github.ref, 'main')
      with:
        allowUpdates: true
        name: Latest
        draft: false
        prerelease: false
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        artifacts: './module.json,./module.zip'
        tag: latest
